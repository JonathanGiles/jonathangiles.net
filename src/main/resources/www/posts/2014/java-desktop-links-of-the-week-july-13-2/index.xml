<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<post>
		<ID>1761</ID>
		<Slug>java-desktop-links-of-the-week-july-13-2</Slug>
		<Title>Java desktop links of the week, July 13</Title>
		<Date>2014-07-13</Date>
		<Status>publish</Status>
		<Categories><![CDATA[Programming>Java>Java Client]]></Categories>
		<Tags>griffon|javafx</Tags>
		<Content><![CDATA[<p>Sorry about not posting links last week - I was on vacation, and the internet in my hotel was terrible. Because I didn't get a post out last week, this week I have a heap of links to share. Enjoy! :-)</p>
<h4>JavaFX</h4>
<ul>
	<li><strong>Geertjan Wielenga</strong> has posted about his <a href="https://blogs.oracle.com/geertjan/entry/news_from_the_modular_javafx">modular JavaFX Application Framework project</a>, which looks promising.</li>
	<li><strong>Danno Ferrin</strong> has put out <a href="http://speling.shemnon.com//blog/2014/07/11/gradle-and-maven-plugins-for-8u20-update/">updated versions</a> of the Gradle and Maven plugins for JavaFX 8u20.</li>
	<li><strong>Tomas Mikula</strong> has created a <a href="http://tomasmikula.github.io/blog/2014/07/06/richtextfx-just-got-faster.html">simplified VirtualFlow implementation</a> for use in his RichTextFX project. VirtualFlow is used to efficiently handle ListView, TableView, etc. Tomas' implementation is a more performant implementation, at the cost of reduced functionality. As the owner of the JavaFX VirtualFlow implementation, I would love to see the official code getting faster, but it is very, very hard to achieve without functional regressions. It is always one of those tasks I try to undertake once per release, but I think most of the low-hanging fruit has well and truly been picked. <strong>Quick update:</strong> I just spent an hour trying to improve the performance of the JavaFX VirtualFlow based on Tomas' benchmark, and managed to take the results from 25/25/5/75 to 1/0/5/0 (refer to the <a href="https://github.com/TomasMikula/Flowless">flowless wiki document</a> to understand what these numbers mean). You can see more detail in my last two comments over at <a href="https://javafx-jira.kenai.com/browse/RT-35395">RT-35395</a>.</li>
	<li><strong>Dirk Lemmermann</strong> continues to post JavaFX-related tips, including '<a href="http://dlemmermann.wordpress.com/2014/07/09/javafx-tip-4-have-the-final-word/">Have the Final Word</a>', '<a href="http://dlemmermann.wordpress.com/2014/07/10/javafx-tip-5-be-observable/">Be Observable</a>', '<a href="http://dlemmermann.wordpress.com/2014/07/11/javafx-tip-6-use-transparent-colors/">Use Transparent Colors</a>', and '<a href="http://dlemmermann.wordpress.com/2014/07/11/javafx-tip-7-use-css-color-constants-derive-colors/">Use CSS Color Constants / Derive Colors</a>'.</li>
	<li><strong>Jens Deters</strong> has three posts. Firstly, he has a post talking about <a href="http://www.jensd.de/wordpress/?p=1245">how to get rid of focus highlighting in JavaFX</a>. <strong>David Grieves'</strong> comment gives good insight into how borders are handled in JavaFX. Secondly, <strong>Jens</strong> has announced that <a href="http://www.jensd.de/wordpress/?p=1276">MQTT.fx 0.0.4 has been released</a>. Finally, <strong>Jens</strong> has a post about <a href="http://www.jensd.de/wordpress/?p=1307">UI logic with JavaFX Bindings</a>.</li>
	<li><strong>Andres Almiray</strong> has two posts on 'getting started with Griffon and JavaFX'. The <a href="http://www.jroller.com/aalmiray/entry/getting_started_with_griffon_and">first post</a> talks about "the new capabilities of the framework, specifically targeting JavaFX as the main UI toolkit and Java as the main programming language." The <a href="http://www.jroller.com/aalmiray/entry/getting_started_with_griffon_and1">second post</a> talks about the same application as in part one, but using Groovy instead of Java.</li>
	<li><strong>Pedro Duque Vieira</strong> has blogged about the addition of a <a href="http://pixelduke.wordpress.com/2014/07/01/toggle-switch-for-java/">ToggleSwitch control to JFXtras</a>, which also includes a JMetro style.</li>
	<li><strong> John Sirach</strong> has posted a <a href="http://pidome.wordpress.com/2014/07/09/javafx-8-introduction-by-example/">review</a> of the recently released JavaFX 8: Introduction by Example book.</li>
	<li><strong>Alexander Casall</strong> has a post about <a href="http://blog.buildpath.de/fxml-composition-how-to-get-the-controller-of-an-included-fxml-view-nested-controllers/">how to get the controller of an included FXML</a> when using FXML composition.</li>
	<li><strong>William Ant√¥nio</strong> has a blog post <a href="http://fxapps.blogspot.co.nz/2014/07/javafx-apps-using-javascript-and-gainda.html">about the Gainda project</a>, which appears to be a DSL for creating JavaFX applications in JavaScript (using Nashorn).</li>
	<li><strong>Manuel Mauky</strong> has been working on an '<a href="https://github.com/lestard/advanced-bindings">Advanced Bindings</a>' project for JavaFX, which, not surprisingly, is "a collection of useful helpers and custom binding implementations to simplify the development of applications that are heavily based on JavaFX's Properties and Bindings. "</li>
	<li><strong>David Gilbert</strong> let me know that <a href="http://www.jfree.org/jfreechart/">JFreeChart 1.0.18 has been released</a>. He went on to say that "it features JavaFX support with a new ChartViewer control that renders charts to a Canvas node and handles tooltips, a context menu, zooming via mouse drag and wheel events, panning and mouse event notifications (more or less equivalent to the existing ChartPanel class used in Swing). This will ease the path for our users that are migrating Swing applications to JavaFX, as their charting code will require very minimal changes."</li>
	<li><strong>Mark Stephens</strong> from IDR solutions (makers of the PDF viewing software for Swing and JavaFX) let me know that they "offer an Open source version (with less bells and whistles) under an LGPL license at <a href="http://www.idrsolutions.com/open-fx/">http://www.idrsolutions.com/open-fx/</a>". He went on to say that "we wanted a generic free version which lots of people could use (including us in our NetBeans plugin) and we think there are lots of uses for this in embedded. Then a high end supported version with support and lots of extras (like a slick pageflow which could work really nicely on a Pi with touchscreen) which funds the development."</li>
	<li><strong>Johannes Rupprecht</strong> has a post about <a href="http://johnthecodingarchitect.blogspot.com.au/2014/06/custom-transitions.html">custom transitions in JavaFX</a>.</li>
</ul>
<h4>Java2D</h4>
<ul>
	<li><strong>Christoph Nahr</strong> has a post about <a href="http://news.kynosarges.org/2014/06/28/glyph-positioning-in-jfreesvg-orsonpdf/">glyph positioning in JFreeSVG &amp; OrsonPDF</a>.</li>
</ul>
<p>That's a lot of links! Keep up the hard work folks, it's fascinating reading what you're all doing, and it makes me jealous that there aren't more hours in the day to hack on all the stuff you're doing.</p>
]]></Content>
	</post>
